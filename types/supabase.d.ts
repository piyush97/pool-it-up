/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/Favourites': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Favourites.id'];
          created_at?: parameters['rowFilter.Favourites.created_at'];
          email?: parameters['rowFilter.Favourites.email'];
          location?: parameters['rowFilter.Favourites.location'];
          /** type of location */
          type?: parameters['rowFilter.Favourites.type'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['Favourites'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Favourites */
          Favourites?: definitions['Favourites'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Favourites.id'];
          created_at?: parameters['rowFilter.Favourites.created_at'];
          email?: parameters['rowFilter.Favourites.email'];
          location?: parameters['rowFilter.Favourites.location'];
          /** type of location */
          type?: parameters['rowFilter.Favourites.type'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Favourites.id'];
          created_at?: parameters['rowFilter.Favourites.created_at'];
          email?: parameters['rowFilter.Favourites.email'];
          location?: parameters['rowFilter.Favourites.location'];
          /** type of location */
          type?: parameters['rowFilter.Favourites.type'];
        };
        body: {
          /** Favourites */
          Favourites?: definitions['Favourites'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/Rides': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Rides.id'];
          created_at?: parameters['rowFilter.Rides.created_at'];
          car_type?: parameters['rowFilter.Rides.car_type'];
          car_name?: parameters['rowFilter.Rides.car_name'];
          seats_available?: parameters['rowFilter.Rides.seats_available'];
          from?: parameters['rowFilter.Rides.from'];
          to?: parameters['rowFilter.Rides.to'];
          datetime_start?: parameters['rowFilter.Rides.datetime_start'];
          todatetime_end?: parameters['rowFilter.Rides.todatetime_end'];
          cost_passenger?: parameters['rowFilter.Rides.cost_passenger'];
          cost_bag?: parameters['rowFilter.Rides.cost_bag'];
          additional_data?: parameters['rowFilter.Rides.additional_data'];
          host_email?: parameters['rowFilter.Rides.host_email'];
          passengers?: parameters['rowFilter.Rides.passengers'];
          car_number?: parameters['rowFilter.Rides.car_number'];
          host_id?: parameters['rowFilter.Rides.host_id'];
          title?: parameters['rowFilter.Rides.title'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['Rides'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Rides */
          Rides?: definitions['Rides'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Rides.id'];
          created_at?: parameters['rowFilter.Rides.created_at'];
          car_type?: parameters['rowFilter.Rides.car_type'];
          car_name?: parameters['rowFilter.Rides.car_name'];
          seats_available?: parameters['rowFilter.Rides.seats_available'];
          from?: parameters['rowFilter.Rides.from'];
          to?: parameters['rowFilter.Rides.to'];
          datetime_start?: parameters['rowFilter.Rides.datetime_start'];
          todatetime_end?: parameters['rowFilter.Rides.todatetime_end'];
          cost_passenger?: parameters['rowFilter.Rides.cost_passenger'];
          cost_bag?: parameters['rowFilter.Rides.cost_bag'];
          additional_data?: parameters['rowFilter.Rides.additional_data'];
          host_email?: parameters['rowFilter.Rides.host_email'];
          passengers?: parameters['rowFilter.Rides.passengers'];
          car_number?: parameters['rowFilter.Rides.car_number'];
          host_id?: parameters['rowFilter.Rides.host_id'];
          title?: parameters['rowFilter.Rides.title'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Rides.id'];
          created_at?: parameters['rowFilter.Rides.created_at'];
          car_type?: parameters['rowFilter.Rides.car_type'];
          car_name?: parameters['rowFilter.Rides.car_name'];
          seats_available?: parameters['rowFilter.Rides.seats_available'];
          from?: parameters['rowFilter.Rides.from'];
          to?: parameters['rowFilter.Rides.to'];
          datetime_start?: parameters['rowFilter.Rides.datetime_start'];
          todatetime_end?: parameters['rowFilter.Rides.todatetime_end'];
          cost_passenger?: parameters['rowFilter.Rides.cost_passenger'];
          cost_bag?: parameters['rowFilter.Rides.cost_bag'];
          additional_data?: parameters['rowFilter.Rides.additional_data'];
          host_email?: parameters['rowFilter.Rides.host_email'];
          passengers?: parameters['rowFilter.Rides.passengers'];
          car_number?: parameters['rowFilter.Rides.car_number'];
          host_id?: parameters['rowFilter.Rides.host_id'];
          title?: parameters['rowFilter.Rides.title'];
        };
        body: {
          /** Rides */
          Rides?: definitions['Rides'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/Users': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Users.id'];
          updated_at?: parameters['rowFilter.Users.updated_at'];
          first_name?: parameters['rowFilter.Users.first_name'];
          last_name?: parameters['rowFilter.Users.last_name'];
          username?: parameters['rowFilter.Users.username'];
          avatar_url?: parameters['rowFilter.Users.avatar_url'];
          website?: parameters['rowFilter.Users.website'];
          dob?: parameters['rowFilter.Users.dob'];
          phone?: parameters['rowFilter.Users.phone'];
          email?: parameters['rowFilter.Users.email'];
          is_paid?: parameters['rowFilter.Users.is_paid'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['Users'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Users */
          Users?: definitions['Users'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Users.id'];
          updated_at?: parameters['rowFilter.Users.updated_at'];
          first_name?: parameters['rowFilter.Users.first_name'];
          last_name?: parameters['rowFilter.Users.last_name'];
          username?: parameters['rowFilter.Users.username'];
          avatar_url?: parameters['rowFilter.Users.avatar_url'];
          website?: parameters['rowFilter.Users.website'];
          dob?: parameters['rowFilter.Users.dob'];
          phone?: parameters['rowFilter.Users.phone'];
          email?: parameters['rowFilter.Users.email'];
          is_paid?: parameters['rowFilter.Users.is_paid'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Users.id'];
          updated_at?: parameters['rowFilter.Users.updated_at'];
          first_name?: parameters['rowFilter.Users.first_name'];
          last_name?: parameters['rowFilter.Users.last_name'];
          username?: parameters['rowFilter.Users.username'];
          avatar_url?: parameters['rowFilter.Users.avatar_url'];
          website?: parameters['rowFilter.Users.website'];
          dob?: parameters['rowFilter.Users.dob'];
          phone?: parameters['rowFilter.Users.phone'];
          email?: parameters['rowFilter.Users.email'];
          is_paid?: parameters['rowFilter.Users.is_paid'];
        };
        body: {
          /** Users */
          Users?: definitions['Users'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description favourite locations of users */
  Favourites: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    email?: string;
    /** Format: json */
    location?: string;
    /**
     * Format: character varying
     * @description type of location
     */
    type?: string;
  };
  Rides: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: text */
    car_type?: string;
    /** Format: text */
    car_name?: string;
    /** Format: bigint */
    seats_available?: number;
    /** Format: jsonb */
    from?: string;
    /** Format: jsonb */
    to?: string;
    /** Format: timestamp with time zone */
    datetime_start?: string;
    /** Format: timestamp with time zone */
    todatetime_end?: string;
    /** Format: bigint */
    cost_passenger?: number;
    /** Format: bigint */
    cost_bag?: number;
    /** Format: text */
    additional_data?: string;
    /** Format: text */
    host_email?: string;
    /** Format: text */
    passengers?: string;
    /** Format: text */
    car_number?: string;
    /** Format: text */
    host_id?: string;
    /** Format: text */
    title?: string;
  };
  /** @description User details */
  Users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    first_name?: string;
    /** Format: text */
    last_name?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
    /** Format: date */
    dob: string;
    /** Format: character varying */
    phone?: string;
    /** Format: character varying */
    email?: string;
    /** Format: boolean */
    is_paid?: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description Favourites */
  'body.Favourites': definitions['Favourites'];
  /** Format: bigint */
  'rowFilter.Favourites.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.Favourites.created_at': string;
  /** Format: uuid */
  'rowFilter.Favourites.email': string;
  /** Format: json */
  'rowFilter.Favourites.location': string;
  /**
   * Format: character varying
   * @description type of location
   */
  'rowFilter.Favourites.type': string;
  /** @description Rides */
  'body.Rides': definitions['Rides'];
  /** Format: uuid */
  'rowFilter.Rides.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.Rides.created_at': string;
  /** Format: text */
  'rowFilter.Rides.car_type': string;
  /** Format: text */
  'rowFilter.Rides.car_name': string;
  /** Format: bigint */
  'rowFilter.Rides.seats_available': string;
  /** Format: jsonb */
  'rowFilter.Rides.from': string;
  /** Format: jsonb */
  'rowFilter.Rides.to': string;
  /** Format: timestamp with time zone */
  'rowFilter.Rides.datetime_start': string;
  /** Format: timestamp with time zone */
  'rowFilter.Rides.todatetime_end': string;
  /** Format: bigint */
  'rowFilter.Rides.cost_passenger': string;
  /** Format: bigint */
  'rowFilter.Rides.cost_bag': string;
  /** Format: text */
  'rowFilter.Rides.additional_data': string;
  /** Format: text */
  'rowFilter.Rides.host_email': string;
  /** Format: text */
  'rowFilter.Rides.passengers': string;
  /** Format: text */
  'rowFilter.Rides.car_number': string;
  /** Format: text */
  'rowFilter.Rides.host_id': string;
  /** Format: text */
  'rowFilter.Rides.title': string;
  /** @description Users */
  'body.Users': definitions['Users'];
  /** Format: uuid */
  'rowFilter.Users.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.Users.updated_at': string;
  /** Format: text */
  'rowFilter.Users.first_name': string;
  /** Format: text */
  'rowFilter.Users.last_name': string;
  /** Format: text */
  'rowFilter.Users.username': string;
  /** Format: text */
  'rowFilter.Users.avatar_url': string;
  /** Format: text */
  'rowFilter.Users.website': string;
  /** Format: date */
  'rowFilter.Users.dob': string;
  /** Format: character varying */
  'rowFilter.Users.phone': string;
  /** Format: character varying */
  'rowFilter.Users.email': string;
  /** Format: boolean */
  'rowFilter.Users.is_paid': string;
}

export interface operations {}

export interface external {}
